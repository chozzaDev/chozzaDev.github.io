---
title:  "Python Unit Test"
date:   2021-06-28 08:01:12 +0900
categories: python, unittest
---

## Python Unit Test

내가 다닌 회사 및 프로젝트 들이 기술력이 부족한건지 인력 수준이 낮은건지 아니면 귀찮은건지... 단위테스트를 수행하는 곳을 본적이 없다.

하지만 매번 회사가 되었던 프로젝트가 되었던 환경이 변하여도 남이 안한다고해서 나도 안한다는 생각을 할 수는 없는 노릇이며

단위테스트를 꼭 작성해야 한다고 생각하기에 항상 작성하려 노력한다.

뭐 기술서적이나 유명하신 분들이 단위테스트의 필요성에 대해서 잘 정리하셨지만 실무에서 내가 느끼는 필요 이유는 다음과 같다.

1. 사람이기에 실수를 하며, 일을 많이 할수록 실수는 늘어난다.
  - 단위테스트를 작성하면 정확히 정의된 의도대로 동작하는지 검증이 가능하다.
  - 스팩이 변할 경우 사람이 미처 생각못하는 영향범위를 단위테스트가 검증 찾아준다.
  - 놓친 부분이 있따면 추가 단위테스트 작성을 통하여 다음번에 동일한 실수를 하지 않게 해준다.

2. 검증에 필요한 시간을 줄여 더욱 생산성 높은 개발을 할 수 있다.
  - 처음에 작성하는건 귀찮을지 몰라도 작성된 단위테스트는 매번 해야하는 테스트의 수고를 엄청나게 덜어준다.
  - 테스트의 자동하는 테스트에 들어가는 시간을 줄이고 개발에 집중하는 시간을 늘려 높은 생산성에 기여한다.
  - 바쁘고, 시간없다고 입에 달고 사는 개발자라면 더더욱 해야한다.

3. 소스의 품질이 높아진다.
  - 단위테스트를 작성하다보면 느끼겠지만 테스트가 가능한 코드를 작성하는게 더 깔끔한 코드를 작성하는 길이라는 것에 동의할것이다.
  - 물론 생각없이 의무적으로 작성한다면 품질이 좋아질리는 없다.

잡설이 길었다.

아래 공식 한글문서가 엄청나게 잘되어 있으니 참조하면 되겠다.

### 파이썬에서 제공하는 공식 한글 문서
[공식 홈페이지](https://docs.python.org/ko/3/library/unittest.html# "공식홈페이지")

이외에 Fast API 를 사용하여 API 단위테스트를 작성하다보면 테스트 실행전 해야할 일들 (설정파일 로딩, 로그인 등등...)이 있는데

pytest fixtures 를 통하여 작성 가능하다.

```python
@pytest.fixture(scope="function")
def login(session):
  ... 중략
    return dict(Authorization=f"Bearer {access_token}")
```

이런식으로 작성해 놓으면 실제 단위테스트 작성에서 다음과 같이 사용 가능하다.

```python
def test_users(client, login):
    response = client.get("/api/v1/users", headers=login)
    assert response.status_code == 200
    ... 중략
```

login 파라미터가 실제 fixture 가 실행된 결과가 들어온다는 뜻...


잡담이지만...

하루 평균 13시간씩 일해도 너무 일이 많아서 블로그 쓰기가 쉽지 않다...

진짜 블로그 멋지게 잘쓰시는 분들 보면 대단하게 느껴진다.
